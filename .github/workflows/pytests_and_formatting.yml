name: CI/CD Assurance Pipeline

on:
    push:
        branches: ["main"]
        tags: ["v*"]
    pull_request:
        branches: ["main"]
    workflow_dispatch:
        inputs:
            security-scan:
                description: "Run SAST scan"
                required: false
                type: boolean

permissions:
    contents: write
    actions: read
    security-events: write
    id-token: write

jobs:
    quality-gate:
        name: "Quality Gate (${{ matrix.os }})"
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest]
                python-version: ["3.13"]
                experimental: [false]
                include:
                    - os: ubuntu-latest
                      artifact-name: linux-artifacts
                    - os: windows-latest
                      artifact-name: win-artifacts

        runs-on: ${{ matrix.os }}
        env:
            ARTIFACT_DIR: test/artifacts
            COVERAGE_FILE: coverage.xml

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  persist-credentials: false

            - name: Configure Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}
                  cache: "pip"
                  cache-dependency-path: |
                      pyproject.toml
                      **/requirements.txt

            - name: Install with hardening
              run: |
                  python -m pip install --require-hashes -r requirements.txt
                  pip install --no-deps ".[dev]"

            - name: Static analysis
              uses: ./.github/actions/lint
              with:
                  strict: ${{ github.event_name == 'pull_request' }}

            - name: Security scan
              if: ${{ inputs.security-scan || github.event_name == 'pull_request' }}
              uses: shiftleft/scan-action@v2
              with:
                  output: ${{ env.ARTIFACT_DIR }}/security

            - name: Execute test suite
              run: |
                  pytest --cov=astra --cov-report=xml \
                    --junitxml=${{ env.ARTIFACT_DIR }}/results.xml \
                    --cov-branch

            - name: Store evidence
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.artifact-name }}
                  path: |
                      ${{ env.ARTIFACT_DIR }}/**
                      ${{ env.COVERAGE_FILE }}
                      !**/__pycache__

            - name: Publish coverage
              if: matrix.os == 'ubuntu-latest'
              uses: codecov/codecov-action@v3
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ${{ env.COVERAGE_FILE }}

    compliance-check:
        name: Audit Trail
        runs-on: ubuntu-latest
        needs: quality-gate

        steps:
            - uses: actions/github-script@v7
              id: artifact-lookup
              with:
                  script: |
                      const { data } = await github.rest.actions.listWorkflowRunArtifacts({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: context.runId
                      });
                      return data.artifacts.map(a => ({name: a.name, url: a.url}));

            - name: Verify SBOM
              uses: anchore/sbom-action@v1
              with:
                  artifact-urls: ${{ steps.artifact-lookup.outputs.result }}
